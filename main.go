package main

import (
	"crypto/md5"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
type Config struct {
	ServerPort      string
	LauncherClient  string
	GameClient      string
	LauncherVersion string
	GameVersion     string
	ClientsDir      string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
type NewsItem struct {
	ID      int    `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	Image   string `json:"image"` // –∏–º—è JPG —Ñ–∞–π–ª–∞
	Date    string `json:"date"`
}

type NewsResponse struct {
	News []NewsItem `json:"news"`
}

type VersionResponse struct {
	LauncherVersion string `json:"launcher_version"`
	GameVersion     string `json:"game_version"`
}

type FileInfoResponse struct {
	Filename string `json:"filename"`
	Size     int64  `json:"size"`
	Hash     string `json:"hash"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
type Logger struct {
	*log.Logger
}

var config Config

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := loadConfig(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –¥–∞—Ç–æ–π
	logger := &Logger{
		Logger: log.New(os.Stdout, "[LAUNCHER] ", log.Ldate|log.Ltime),
	}

	// –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	http.Handle("/images/", http.StripPrefix("/images/", http.FileServer(http.Dir("./images"))))

	// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	http.HandleFunc("/api/news", logger.newsHandler)
	http.HandleFunc("/api/version", logger.versionHandler)
	http.HandleFunc("/api/download/launcher", logger.downloadLauncherHandler)
	http.HandleFunc("/api/download/game", logger.downloadGameHandler)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := ":" + config.ServerPort
	logger.Printf("–°–µ—Ä–≤–µ—Ä –ª–∞—É–Ω—á–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", port)
	logger.Println("–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤...")
	log.Fatal(http.ListenAndServe(port, nil))
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
func loadConfig() error {
	if err := godotenv.Load(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: %v", err)
	}

	config = Config{
		ServerPort:      getEnv("SERVER_PORT", "8080"),
		LauncherClient:  getEnv("LAUNCHER_CLIENT_FILE", "launcher.exe"),
		GameClient:      getEnv("GAME_CLIENT_FILE", "Loil.exe"),
		LauncherVersion: getEnv("LAUNCHER_VERSION", "0.0.0"),
		GameVersion:     getEnv("GAME_VERSION", "0.0.0"),
		ClientsDir:      getEnv("CLIENTS_DIR", "clients"),
	}

	return nil
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) newsHandler(w http.ResponseWriter, r *http.Request) {
	l.handleWithCORS(w, r, "üì∞", "/api/news", func() {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
		news, err := loadNews()
		if err != nil {
			l.logError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err)
			http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err), http.StatusInternalServerError)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		response := NewsResponse{News: news}
		json.NewEncoder(w).Encode(response)

		l.logSuccess("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: %d", len(news))
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä—Å–∏–π
func (l *Logger) versionHandler(w http.ResponseWriter, r *http.Request) {
	l.handleWithCORS(w, r, "üîñ", "/api/version", func() {
		response := VersionResponse{
			LauncherVersion: config.LauncherVersion,
			GameVersion:     config.GameVersion,
		}

		json.NewEncoder(w).Encode(response)
		l.logSuccess("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–µ—Ä—Å–∏–∏: –ª–∞—É–Ω—á–µ—Ä=%s, –∏–≥—Ä–∞=%s",
			config.LauncherVersion, config.GameVersion)
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞
func (l *Logger) downloadLauncherHandler(w http.ResponseWriter, r *http.Request) {
	l.handleWithCORS(w, r, "‚¨áÔ∏è", "/api/download/launcher", func() {
		filePath := filepath.Join(config.ClientsDir, config.LauncherClient)
		l.serveFileDownload(w, r, filePath, "launcher")
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–≥—Ä—ã
func (l *Logger) downloadGameHandler(w http.ResponseWriter, r *http.Request) {
	l.handleWithCORS(w, r, "‚¨áÔ∏è", "/api/download/game", func() {
		filePath := filepath.Join(config.ClientsDir, config.GameClient)
		l.serveFileDownload(w, r, filePath, "game")
	})
}

// –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
func (l *Logger) serveFileDownload(w http.ResponseWriter, r *http.Request, filePath, fileType string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		l.logError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
		http.Error(w, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Open(filePath)
	if err != nil {
		l.logError("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", http.StatusInternalServerError)
		return
	}
	defer file.Close()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
	fileInfo, err := file.Stat()
	if err != nil {
		l.logError("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ %s: %v", filePath, err)
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ", http.StatusInternalServerError)
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à —Ñ–∞–π–ª–∞
	hash, err := calculateFileHash(filePath)
	if err != nil {
		l.logError("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
		// –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ö—ç—à –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
	filename := filepath.Base(filePath)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
	w.Header().Set("Content-Type", "application/octet-stream")
	w.Header().Set("Content-Length", fmt.Sprintf("%d", fileInfo.Size()))

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—ç—à–µ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å
	if hash != "" {
		w.Header().Set("X-File-Hash", hash)
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –æ—Ç–≤–µ—Ç
	_, err = io.Copy(w, file)
	if err != nil {
		l.logError("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
		return
	}

	l.logSuccess("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª %s (—Ä–∞–∑–º–µ—Ä: %d bytes, —Ö—ç—à: %s)",
		filename, fileInfo.Size(), hash)
}

// –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func (l *Logger) handleWithCORS(w http.ResponseWriter, r *http.Request, emoji, endpoint string, handler func()) {
	// –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight OPTIONS –∑–∞–ø—Ä–æ—Å
	if r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
	clientIP := getClientIP(r)
	l.Printf("%s –ó–∞–ø—Ä–æ—Å %s –æ—Ç %s", emoji, endpoint, clientIP)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler()

	// –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
	l.logToFile(clientIP, endpoint, emoji)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
func (l *Logger) logError(format string, v ...interface{}) {
	message := fmt.Sprintf(format, v...)
	l.Printf("‚ùå %s", message)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞
func (l *Logger) logSuccess(format string, v ...interface{}) {
	message := fmt.Sprintf(format, v...)
	l.Printf("‚úÖ %s", message)
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª —Å –¥–∞—Ç–æ–π
func (l *Logger) logToFile(clientIP, endpoint, emoji string) {
	date := time.Now().Format("2006-01-02")
	logDir := "logs"
	logFile := filepath.Join(logDir, fmt.Sprintf("access_%s.log", date))

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(logDir, 0755); err != nil {
		l.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: %v", err)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
	file, err := os.OpenFile(logFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		l.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
		return
	}
	defer file.Close()

	logEntry := fmt.Sprintf("[%s] %s %s - %s\n",
		time.Now().Format("2006-01-02 15:04:05"),
		clientIP,
		endpoint,
		emoji)

	if _, err := file.WriteString(logEntry); err != nil {
		l.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞
func getClientIP(r *http.Request) string {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –∑–∞ –ø—Ä–æ–∫—Å–∏/–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º)
	ip := r.Header.Get("X-Real-IP")
	if ip == "" {
		ip = r.Header.Get("X-Forwarded-For")
		if ip != "" {
			// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
			ips := strings.Split(ip, ",")
			ip = strings.TrimSpace(ips[0])
		}
	}

	// –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º RemoteAddr
	if ip == "" {
		ip, _, _ = net.SplitHostPort(r.RemoteAddr)
	}

	return ip
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞
func calculateFileHash(filename string) (string, error) {
	file, err := os.Open(filename)
	if err != nil {
		return "", err
	}
	defer file.Close()

	hash := md5.New()
	if _, err := io.Copy(hash, file); err != nil {
		return "", err
	}

	return hex.EncodeToString(hash.Sum(nil)), nil
}

func loadNews() ([]NewsItem, error) {
	// –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
	data, err := os.ReadFile("news/news.json")
	if err != nil {
		return nil, err
	}

	var news []NewsItem
	err = json.Unmarshal(data, &news)
	return news, err
}
