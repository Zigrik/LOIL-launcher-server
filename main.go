package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"strings"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
type NewsItem struct {
	ID      int    `json:"id"`
	Title   string `json:"title"`
	Content string `json:"content"`
	Image   string `json:"image"` // –∏–º—è JPG —Ñ–∞–π–ª–∞
	Date    string `json:"date"`
}

type NewsResponse struct {
	News []NewsItem `json:"news"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
type Logger struct {
	*log.Logger
}

func main() {
	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –¥–∞—Ç–æ–π
	logger := &Logger{
		Logger: log.New(os.Stdout, "[LAUNCHER] ", log.Ldate|log.Ltime),
	}

	// –°—Ç–∞—Ç–∏–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	http.Handle("/images/", http.StripPrefix("/images/", http.FileServer(http.Dir("./images"))))

	// API –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	http.HandleFunc("/api/news", logger.newsHandler)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := ":8080"
	logger.Printf("–°–µ—Ä–≤–µ—Ä –ª–∞—É–Ω—á–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", port)
	logger.Println("–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤...")
	log.Fatal(http.ListenAndServe(port, nil))
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
func (l *Logger) newsHandler(w http.ResponseWriter, r *http.Request) {
	// –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight OPTIONS –∑–∞–ø—Ä–æ—Å
	if r.Method == "OPTIONS" {
		w.WriteHeader(http.StatusOK)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
	clientIP := getClientIP(r)
	l.Printf("üì∞ –ó–∞–ø—Ä–æ—Å /api/news –æ—Ç %s", clientIP)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
	news, err := loadNews()
	if err != nil {
		l.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err)
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: %v", err), http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	response := NewsResponse{News: news}
	json.NewEncoder(w).Encode(response)

	l.Printf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: %d –¥–ª—è %s", len(news), clientIP)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∫–ª–∏–µ–Ω—Ç–∞
func getClientIP(r *http.Request) string {
	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –∑–∞ –ø—Ä–æ–∫—Å–∏/–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º)
	ip := r.Header.Get("X-Real-IP")
	if ip == "" {
		ip = r.Header.Get("X-Forwarded-For")
		if ip != "" {
			// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞
			ips := strings.Split(ip, ",")
			ip = strings.TrimSpace(ips[0])
		}
	}

	// –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º RemoteAddr
	if ip == "" {
		ip, _, _ = net.SplitHostPort(r.RemoteAddr)
	}

	return ip
}

func loadNews() ([]NewsItem, error) {
	// –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
	data, err := os.ReadFile("news/news.json")
	if err != nil {
		return nil, err
	}

	var news []NewsItem
	err = json.Unmarshal(data, &news)
	return news, err
}
